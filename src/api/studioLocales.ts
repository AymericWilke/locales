import fs from 'node:fs/promises'
import path from 'node:path'
import {readLocales} from '../util/readLocales'
import {readJsonFile} from '../util/readJsonFile'
import {runScript} from '../util/runScript'
import {packageJsonSchema} from '../schemas'
import {getIdentifier, getPackageName} from './localePackage'

const studioRootPath = path.join(__dirname, '..', 'apps', 'studio')

export async function writeStudioLocalePluginImports() {
  const locales = await readLocales()

  // Make import declarations for each locale, and a list of identifiers we can export
  const imports: string[] = []
  const identifiers: string[] = []
  const localeDependencies: Record<string, string> = {}
  for (const locale of locales) {
    const identifier = getIdentifier(locale)
    const packageName = getPackageName(locale)

    imports.push(`import ${identifier} from '${packageName}'`)
    identifiers.push(identifier)
    localeDependencies[packageName] = 'workspace:*'
  }

  const content = imports.join('\n')
  const exported = `export const locales = [${identifiers.map((id) => `${id}()`)}]`
  const banner = `// This file is auto-generated by scripts/studioLocales.ts`
  const code = `${banner}\n${content}\n\n${exported}\n`

  const localesFilePath = path.join(studioRootPath, 'locales.ts')
  await fs.writeFile(localesFilePath, code, {encoding: 'utf8'})

  // Add the entries to `package.json`
  const pkgJsonPath = path.join(studioRootPath, 'package.json')
  const pkgJson = await readJsonFile(pkgJsonPath, packageJsonSchema)

  pkgJson.dependencies = sortDependencies({...pkgJson.dependencies, ...localeDependencies})
  await fs.writeFile(pkgJsonPath, `${JSON.stringify(pkgJson, null, 2)}\n`)
}

function sortDependencies(dependencies: Record<string, string>): Record<string, string> {
  return Object.fromEntries(Object.entries(dependencies).sort(([a], [b]) => a.localeCompare(b)))
}

runScript(writeStudioLocalePluginImports)
