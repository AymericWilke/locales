/**
 * Generates the `apps/studio/locales.ts` file, which contains import statements for all the locale
 * packages, and an array of all the plugin identifiers. This lets the studio app load all the
 * defined locales.
 *
 * It also adds `dependencies` entries to `apps/studio/package.json` for all the locale packages,
 * which uses the `workspace:` protocol to make the studio app use the local packages instead of
 * the published ones.
 */
import {writeFile} from 'node:fs/promises'
import {join as joinPath} from 'node:path'
import {readLocales} from '../util/readLocales'
import {readJsonFile} from '../util/readJsonFile'
import {runScript} from '../util/runScript'
import {getRootPath} from '../util/getRootPath'
import {packageJsonSchema} from '../schemas'
import {getIdentifier, getPackageName} from './localePackage'

export async function writeStudioLocalePluginImports() {
  const studioRootPath = joinPath(await getRootPath(), 'apps', 'studio')

  const locales = await readLocales()

  // Make import declarations for each locale, and a list of identifiers we can export
  const imports: string[] = []
  const identifiers: string[] = []
  const localeDependencies: Record<string, string> = {}
  for (const locale of locales) {
    const identifier = getIdentifier(locale)
    const packageName = getPackageName(locale)

    imports.push(`import {${identifier}} from '${packageName}'`)
    identifiers.push(identifier)
    localeDependencies[packageName] = 'workspace:*'
  }

  const content = imports.join('\n')
  const exported = `export const locales = [${identifiers.map((id) => `${id}()`)}]`
  const banner = `// This file is auto-generated by scripts/studioLocales.ts`
  const code = `${banner}\n${content}\n\n${exported}\n`

  const localesFilePath = joinPath(studioRootPath, 'locales.ts')
  await writeFile(localesFilePath, code, {encoding: 'utf8'})

  // Add the entries to `package.json`
  const pkgJsonPath = joinPath(studioRootPath, 'package.json')
  const pkgJson = await readJsonFile(pkgJsonPath, packageJsonSchema)

  pkgJson.dependencies = sortDependencies({...pkgJson.dependencies, ...localeDependencies})
  await writeFile(pkgJsonPath, `${JSON.stringify(pkgJson, null, 2)}\n`)
}

function sortDependencies(dependencies: Record<string, string>): Record<string, string> {
  return Object.fromEntries(Object.entries(dependencies).sort(([a], [b]) => a.localeCompare(b)))
}

runScript(writeStudioLocalePluginImports)
